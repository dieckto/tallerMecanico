import tkinter as tk
#NOTA: usar import de modulo puede evitar el error de importacion ciclica
import app.views.logginView as logginView


class MainView:
    def __init__(self, root, usuario):
        self.root = root
        self.root.title("Main aplication")
        self.root.geometry("800x600")
        self.root.configure(bg="#f0f0f0")
        
        # Variables para controlar el estado del men√∫
        self.menu_desplegado = False
        self.ancho_menu = 250

        #variable usuario
        self.usuario = usuario
        
        # Crear el frame principal
        self.frame_principal = tk.Frame(root, bg="#f0f0f0")
        self.frame_principal.pack(fill=tk.BOTH, expand=True)
        
        # Crear el men√∫ lateral (inicialmente oculto)
        self.menu_lateral = tk.Frame(
            self.frame_principal, 
            bg="#2c3e50", 
            width=self.ancho_menu
        )
        self.menu_lateral.pack(side=tk.LEFT, fill=tk.Y)
        self.menu_lateral.pack_forget()  # Ocultar inicialmente
        
        # Crear el contenido principal
        self.contenido_principal = tk.Frame(self.frame_principal, bg="#ecf0f1")
        self.contenido_principal.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        self.crear_boton_menu()
        self.crear_menu_lateral()
        self.crear_contenido_principal()
        
    def crear_boton_menu(self):
        """Crear el bot√≥n hamburguesa para abrir/cerrar el men√∫"""
        self.btn_menu = tk.Button(
            self.contenido_principal,
            text="‚ò∞",
            font=("Arial", 20),
            bg="#3498db",
            fg="white",
            bd=0,
            width=3,
            height=1,
            command=self.toggle_menu,
            cursor="hand2"
        )
        self.btn_menu.place(x=10, y=10)
        
    def crear_menu_lateral(self):
        """Crear los elementos del men√∫ lateral"""
        titulo = tk.Label(
            self.menu_lateral,
            text="MEN√ö",
            font=("Arial", 16, "bold"),
            bg="#2c3e50",
            fg="white",
            pady=20
        )
        titulo.pack(fill=tk.X)
    
        opciones = [
            "üè† Inicio",
            "üë§ Perfil",
            "üìä Dashboard",
            "‚öôÔ∏è Configuraci√≥n",
            "üìù Reportes",
            "‚ùì Ayuda",
            "üö™ Salir"
        ]
        
        for opcion in opciones:
            btn = tk.Button(
                self.menu_lateral,
                text=opcion,
                font=("Arial", 12),
                bg="#34495e",
                fg="white",
                bd=0,
                pady=15,
                anchor="w",
                padx=20,
                command=lambda opt=opcion: self.seleccionar_opcion(opt),
                cursor="hand2"
            )
            btn.pack(fill=tk.X, padx=5, pady=2)
            
            btn.bind("<Enter>", lambda e, b=btn: b.configure(bg="#4a6b8a"))
            btn.bind("<Leave>", lambda e, b=btn: b.configure(bg="#34495e"))
    
    def crear_contenido_principal(self):
        """Crear el contenido de la ventana principal"""

        titulo_principal = tk.Label(
            self.contenido_principal,
            text=f"¬° bienvenido {self.usuario}!",
            font=("Arial", 24, "bold"),
            bg="#ecf0f1",
            fg="#2c3e50"
        )
        titulo_principal.pack(pady=(80, 20))
        
        # √Årea de contenido
        self.area_contenido = tk.Frame(
            self.contenido_principal,
            bg="white",
            relief=tk.RAISED,
            bd=1
        )
        self.area_contenido.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Texto de bienvenida
        self.etiqueta_contenido = tk.Label(
            self.area_contenido,
            text="Bienvenido!\n\nHaz clic en el bot√≥n ‚ò∞ para abrir el men√∫ lateral.\n\nSelecciona cualquier opci√≥n del men√∫ para ver el contenido aqu√≠.",
            font=("Arial", 14),
            bg="white",
            fg="#34495e",
            justify=tk.CENTER,
            wraplength=400
        )
        self.etiqueta_contenido.pack(expand=True)
    
    def toggle_menu(self):
        """Alternar entre mostrar y ocultar el men√∫"""
        if self.menu_desplegado:
            self.ocultar_menu()
        else:
            self.mostrar_menu()
    
    def mostrar_menu(self):
        """Mostrar el men√∫ lateral con animaci√≥n"""
        self.menu_lateral.pack(side=tk.LEFT, fill=tk.Y, before=self.contenido_principal)
        self.menu_desplegado = True
        
        # Cambiar el √≠cono del bot√≥n
        self.btn_menu.configure(text="‚úï")
    
    def ocultar_menu(self):
        """Ocultar el men√∫ lateral"""
        self.menu_lateral.pack_forget()
        self.menu_desplegado = False
        
        # Cambiar el √≠cono del bot√≥n
        self.btn_menu.configure(text="‚ò∞")
    
    def seleccionar_opcion(self, opcion):
        """Manejar la selecci√≥n de opciones del men√∫"""

        if opcion == "üö™ Salir":
            for widget in self.root.winfo_children():
                widget.destroy()
                logginView.LoginView(self.root)
            return
        contenidos = {
            "üè† Inicio": "Has seleccionado INICIO\n\nEsta es la p√°gina principal de la aplicaci√≥n.",
            "üë§ Perfil": "Has seleccionado PERFIL\n\nAqu√≠ puedes ver y editar tu informaci√≥n personal.",
            "üìä Dashboard": "Has seleccionado DASHBOARD\n\nVista general de estad√≠sticas y m√©tricas importantes.",
            "‚öôÔ∏è Configuraci√≥n": "Has seleccionado CONFIGURACI√ìN\n\nAjusta las preferencias de la aplicaci√≥n.",
            "üìù Reportes": "Has seleccionado REPORTES\n\nGenera y visualiza reportes personalizados.",
            "‚ùì Ayuda": "Has seleccionado AYUDA\n\n¬øNecesitas ayuda? Consulta nuestra documentaci√≥n."
        }
        
        
        texto = contenidos.get(opcion, f"Seleccionaste: {opcion}")
        self.etiqueta_contenido.configure(text=texto)
        
        # Ocultar el men√∫ despu√©s de seleccionar una opci√≥n
        self.ocultar_menu()

# Versi√≥n alternativa con animaci√≥n suave